//
//  ToolbarViewModel.swift
//  PlayCenter
//
//  Created by Behrad Kazemi on 8/14/20.
//  Copyright (c) 2020 Behrad Kazemi. All rights reserved.
//
//  This file was generated by the BEK module generator.
//

import Combine
import Domain

class ToolbarViewModel: ObservableObject {
  
  //MARK: - Properties
  @Published var title = DefaultText.songTitle.rawValue.localize
  @Published var artwork: Data?
  @Published var state = PlayerStatus.stopped
  let useCases: FullPlayerUsecase
  let caches: Domain.MetaDataLoader
  var router: ToolbarRouter
  var metaDataStream: AnyPublisher<PlayerInfo, Never>
  
  private var cancellableSet: Set<AnyCancellable> = []
  
  //MARK: - Initialize
  init(router: ToolbarRouter) {
    self.router = router
    self.useCases = router.platforms.soundCore.makeFullPlayerUsecase()
    self.caches = router.platforms.caches
    self.metaDataStream = useCases.getPlayerInformation()
    self.router = router
    self.setup()
  }
  
  //MARK: - Setup
   func setup(){
    metaDataStream
      .receive(on: RunLoop.main).compactMap { (value) in
        return value.currentModel
    }.compactMap { [caches](value) -> String? in
      return caches.loadTitle(for: value)
    }.assign(to: \.title, on: self)
      .store(in: &cancellableSet)
    
    
    metaDataStream
    .receive(on: RunLoop.main).map { (info) -> PlayerStatus in
      return info.status
    }.assign(to: \.state, on: self)
    .store(in: &cancellableSet)
    
    metaDataStream
      .receive(on: RunLoop.main).compactMap { (value) in
          return value.currentModel
      }.compactMap { [caches](value) -> Data? in
        return caches.loadArtwork(for: value)
    }.assign(to: \.artwork, on: self)
      .store(in: &cancellableSet)
  }
  
  //MARK: - functions

}
