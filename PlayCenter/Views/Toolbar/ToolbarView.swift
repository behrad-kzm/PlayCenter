//
//  ToolbarView.swift
//  PlayCenter
//
//  Created by Behrad Kazemi on 8/14/20.
//  Copyright (c) 2020 Behrad Kazemi. All rights reserved.
//
//  This file was generated by the BEK module generator.
//

import SwiftUI
import Domain
struct ToolbarView: View {
  
  // MARK: -  Properties
  @ObservedObject var viewModel: ToolbarViewModel
  
  
  init(viewModel: ToolbarViewModel){
    self.viewModel = viewModel
  }
  
  var body: some View {
    GeometryReader { proxy in
      ZStack{
        RoundedCorner(radius: 48, corners: [.topRight])
          .padding(EdgeInsets(top: 24, leading: 0, bottom: -32, trailing: 0))
          .foregroundColor(Color("SheetBackgroundColor"))
          .shadow(radius: 16)
        VStack(alignment: .center, spacing: 8) {
          HStack(alignment: .center, spacing: 4) {
            CircularArtworkView(viewModel: CircularArtworkViewModel(model: self.viewModel.artwork, hasShadow: false))
              .padding(.leading, 24.0)
              .aspectRatio(1.0, contentMode: .fit)
            Spacer()
            VStack(alignment: .center, spacing: 8) {
              NotchView(width: 48.0).padding(EdgeInsets(top: 32, leading: 0, bottom: 8, trailing: 0))
              HStack(alignment: .center, spacing: 8) {
                Spacer()
                Image("PlayPreviousButton")
                  .resizable().aspectRatio(contentMode: .fit)
                  .frame(width: proxy.size.height * 0.24, height: proxy.size.height * 0.24, alignment: .center)
                  .onTapGesture {
                    self.viewModel.previous()
                }
                Spacer()
                self.makePlayButtonImage()
                  .resizable().aspectRatio(contentMode: .fit)
                  .frame(width: proxy.size.height * 0.2, height: proxy.size.height * 0.2, alignment: .center)
                  .onTapGesture {
                    self.viewModel.playPause()
                }
                Spacer()
                Image("PlayNextButton")
                  .resizable().aspectRatio(contentMode: .fit)
                  .frame(width: proxy.size.height * 0.24, height: proxy.size.height * 0.24, alignment: .center)
                  .onTapGesture {
                    self.viewModel.next()
                }
                Spacer()
              }.padding(.bottom, 8)
            }
            Spacer()
          }
          HStack(alignment: .center, spacing: 0) {
            Text(self.viewModel.title)
            .lineLimit(1)
              .padding(EdgeInsets(top: 0, leading: 16, bottom: 8, trailing: 16))
            Spacer()
          }
        }
      }
    }
    //    .sheet(isPresented: self.$showNextPage) {
    //
    //    }
  }
  func makePlayButtonImage() -> Image {
    return viewModel.state == PlayerStatus.playing ? Image("PauseButton") : Image("PlayButton")
  }
}

struct ToolbarView_Previews: PreviewProvider {
  static var previews: some View {
    GeometryReader{ proxy in
      VStack(alignment: .center, spacing: 0) {
        Spacer()
        ToolbarView(viewModel: ToolbarViewModel(router: ToolbarRouter(platforms: Application.shared.package)))
          .frame(width: proxy.size.width, height: 120, alignment: .center)
      }
    }
  }
}
