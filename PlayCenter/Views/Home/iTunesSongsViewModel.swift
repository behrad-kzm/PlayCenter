//
//  iTunesSongsViewModel.swift
//  PlayCenter
//
//  Created by Behrad Kazemi on 8/17/20.
//  Copyright (c) 2020 Behrad Kazemi. All rights reserved.
//
//  This file was generated by the BEK module generator.
//

import Combine
import Domain

class iTunesSongsViewModel: ObservableObject {
  
  //MARK: - Properties
  @Published var items = [SongViewModel]()
  @Published var toolbarVM: ToolbarViewModel
  @Published var info: String = ""
  @Published var showToolbar = false
  var title = "RecentyAdded".localize
  var router: iTunesSongsRouter
  let itunesUseCases: Domain.iTunesSongsUseCases
  let playerUseCases: Domain.FullPlayerUsecase
  let caches: Domain.MetaDataLoader
  let songsStream: CurrentValueSubject<[Playable], Never>
  private var cancellableSet: Set<AnyCancellable> = []
  
  //MARK: - Initialize
  init(router: iTunesSongsRouter) {
    self.router = router
    let itunesKit = router.platforms.iTunesKit
    self.itunesUseCases = itunesKit
    self.playerUseCases = router.platforms.soundCore.makeFullPlayerUsecase()
    self.caches = router.platforms.caches
    self.toolbarVM = ToolbarViewModel(router: ToolbarRouter(platforms: router.platforms))
    self.songsStream = itunesKit.loadAllSongs()
    
    songsStream.map({ [caches](items) -> [SongViewModel] in
      return items.compactMap { (item) -> SongViewModel? in
        item.asSongViewModel(loader: caches)
      }
    }).assign(to: \.items, on: self)
      .store(in: &cancellableSet)
    
    
    $items.map { [caches](values) -> String in
      let duration = values.compactMap({ (song) -> TimeInterval? in
        if let current = song.model {
          let duration = caches.loadSongsDuration(for: current)
          return duration
        }
        return nil
      }).reduce(0.0) { (result, current) -> Double in
        return result + current
      }
      let count = values.count
      let result = count > 0 ? DefaultText.songsContainerInfo.rawValue.localize.replacingOccurrences(of: "{1}", with: "\(count)").replacingOccurrences(of:"{2}", with: "\(TimeInterval(duration).formattedDuration)") : ""
      return result
    }.assign(to: \.info, on: self)
      .store(in: &cancellableSet)
    
    playerUseCases.getPlayerInformation()
      .receive(on: RunLoop.main).compactMap({ (info) -> Bool? in
        info.status == .playing || info.status == .paused
      }).removeDuplicates()
      .assign(to: \.showToolbar, on: self)
      .store(in: &cancellableSet)
  }
  
  //MARK: - functions
  func clicked(on songVM: SongViewModel){
    if let firstIndex = items.firstIndex(where: { (viewModelItem) -> Bool in
      viewModelItem.id == songVM.id
    }) {
      let index = Int(firstIndex)
      playerUseCases.setup(models: items.compactMap({ (viewModelItem) -> Playable? in
        viewModelItem.model
      }), index: index)
      return
    }
    #warning("[TODO] - handle error here")
  }
}
